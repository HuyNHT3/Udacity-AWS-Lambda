org: thanhhuyst05
app: serverless-todos-dev
service: serverless-todo-app

plugins:
  - serverless-iam-roles-per-function
  - serverless-offline

provider:
  name: aws
  runtime: nodejs18.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
    TODOS_TABLE: Todos-${self:provider.stage}
    TODOS_CREATED_AT_INDEX: CreatedAtIndex

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetTodos:
    handler: src/lambda/http/getTodos.handler
    timeout: 60
    events:
      - http:
          cors: true
          method: get
          path: todos
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    timeout: 60
    events:
      - http:
          cors: true
          method: post
          path: todos
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}       

  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          cors: true
          method: patch
          path: 'todos/{todoId}'
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}       

  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          cors: true
          method: delete
          path: 'todos/{todoId}'
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}  

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          cors: true
          method: post
          path: 'todos/{todoId}/attachment'
    iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource: arn:aws:s3:::serverless-todo-bucket-dev/*

resources:
  Resources:
    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: todoId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: todoId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: '${self:provider.environment.TODOS_TABLE}'
        LocalSecondaryIndexes:
          - IndexName: '${self:provider.environment.TODOS_CREATED_AT_INDEX}'
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
